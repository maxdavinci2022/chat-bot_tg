import os
import sys
import codecs
import requests
import psycopg2
import json
import asyncio
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import dotenv
import logging

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ UTF-8 –¥–ª—è –≤—ã–≤–æ–¥–∞
if sys.stdout.encoding != 'utf-8':
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer)

# –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ httpx
logging.getLogger("httpx").setLevel(logging.WARNING)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
handler = logging.StreamHandler(sys.stdout)
handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger.handlers = [handler]

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
dotenv.load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
PROVIDER_TOKEN = os.getenv('TELEGRAM_PROVIDER_TOKEN')
DATABASE_URL = os.getenv('DATABASE_URL')
DB_PASSWORD = os.getenv('DB_PASSWORD')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (InlineKeyboardMarkup)
MAIN_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚òÄÔ∏è –ü–æ–≥–æ–¥–∞", callback_data="weather"), InlineKeyboardButton("üë§ –ê–¥–º–∏–Ω", callback_data="admin")],
    [InlineKeyboardButton("‚≠ê –õ—é–±–∏–º—ã–π –≥–æ—Ä–æ–¥", callback_data="favorite_weather")],
    [InlineKeyboardButton("üéÆ –ü–æ–∏–≥—Ä–∞—Ç—å", callback_data="play")]
])

# –ú–µ–Ω—é –∏–≥—Ä (InlineKeyboardMarkup)
GAMES_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("üèôÔ∏è –ì–æ—Ä–æ–¥–∞", callback_data="game_cities"), InlineKeyboardButton("üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data="game_guess")],
    [InlineKeyboardButton("üó∫Ô∏è –ö–≤–µ—Å—Ç", callback_data="game_quest"), InlineKeyboardButton("üß© –õ–æ–≥–∏–∫–∞", callback_data="game_logic")],
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main")]
])

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
try:
    with open("cities.txt", "r", encoding="utf-8") as f:
        VALID_CITIES = set(line.strip().lower() for line in f)
except FileNotFoundError:
    logger.error("–§–∞–π–ª cities.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    VALID_CITIES = set()

# –ö–≤–µ—Å—Ç
QUEST_STAGES = [
    "–¢—ã –≤ —Ç—ë–º–Ω–æ–º –ª–µ—Å—É. –ö—É–¥–∞ –ø–æ–π–¥—ë—à—å? (–≤–ø–µ—Ä—ë–¥/–Ω–∞–∑–∞–¥)",
    "–¢—ã –Ω–∞—à—ë–ª —Å—É–Ω–¥—É–∫. –û—Ç–∫—Ä—ã—Ç—å? (–¥–∞/–Ω–µ—Ç)",
    "–í–Ω—É—Ç—Ä–∏ —Å—É–Ω–¥—É–∫–∞ –∫–ª—é—á. –í–∑—è—Ç—å? (–¥–∞/–Ω–µ—Ç)"
]

# –ó–∞–≥–∞–¥–∫–∏ –¥–ª—è –ª–æ–≥–∏–∫–∏
LOGIC_RIDDLES = [
    {"riddle": "–ß–∏—Å–ª–æ: 2, 4, 6, ?. –ö–∞–∫–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ?", "answer": "8"},
    {"riddle": "–ß—Ç–æ –≤—Å–µ–≥–¥–∞ –∏–¥—ë—Ç, –Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç?", "answer": "–≤—Ä–µ–º—è"},
    {"riddle": "–£ –º–µ–Ω—è –µ—Å—Ç—å –≥–æ—Ä–æ–¥–∞, –Ω–æ –Ω–µ—Ç –¥–æ–º–æ–≤. –ß—Ç–æ —è?", "answer": "–∫–∞—Ä—Ç–∞"}
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS weather_requests (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                city TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            CREATE TABLE IF NOT EXISTS favorite_cities (
                user_id BIGINT,
                city TEXT,
                PRIMARY KEY (user_id, city)
            );
            CREATE TABLE IF NOT EXISTS game_progress (
                user_id BIGINT PRIMARY KEY,
                game_name TEXT,
                score INTEGER DEFAULT 0,
                state JSONB DEFAULT '{}'
            );
            CREATE TABLE IF NOT EXISTS user_achievements (
                user_id BIGINT,
                achievement TEXT,
                PRIMARY KEY (user_id, achievement)
            );
            CREATE TABLE IF NOT EXISTS user_stars (
                user_id BIGINT PRIMARY KEY,
                stars INTEGER DEFAULT 0
            );
            CREATE TABLE IF NOT EXISTS game_results (
                user_id BIGINT,
                game_name TEXT,
                score INTEGER,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        cursor.close()
        conn.close()

def log_weather_request(user_id, city):
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("INSERT INTO weather_requests (user_id, city) VALUES (%s, %s)", (user_id, city))
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã: {e}")
    finally:
        cursor.close()
        conn.close()

def save_favorite_city(user_id, city):
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("INSERT INTO favorite_cities (user_id, city) VALUES (%s, %s) ON CONFLICT DO NOTHING", (user_id, city))
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª—é–±–∏–º–æ–≥–æ –≥–æ—Ä–æ–¥–∞: {e}")
    finally:
        cursor.close()
        conn.close()

def get_favorite_city(user_id):
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("SELECT city FROM favorite_cities WHERE user_id = %s LIMIT 1", (user_id,))
        result = cursor.fetchone()
        return result[0] if result else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª—é–±–∏–º–æ–≥–æ –≥–æ—Ä–æ–¥–∞: {e}")
        return None
    finally:
        cursor.close()
        conn.close()

def start_game(user_id, game_name):
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("INSERT INTO game_progress (user_id, game_name, score, state) VALUES (%s, %s, 0, %s) ON CONFLICT (user_id) DO UPDATE SET game_name = %s, score = 0, state = %s", 
                       (user_id, game_name, '{}', game_name, '{}'))
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã: {e}")
    finally:
        cursor.close()
        conn.close()

def update_game_state(user_id, score, state):
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("UPDATE game_progress SET score = %s, state = %s WHERE user_id = %s", (score, json.dumps(state), user_id))
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã: {e}")
    finally:
        cursor.close()
        conn.close()

def get_game_state(user_id):
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("SELECT game_name, score, state FROM game_progress WHERE user_id = %s", (user_id,))
        result = cursor.fetchone()
        return result if result else (None, 0, '{}')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã: {e}")
        return (None, 0, '{}')
    finally:
        cursor.close()
        conn.close()

def award_achievement(user_id, achievement):
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("INSERT INTO user_achievements (user_id, achievement) VALUES (%s, %s) ON CONFLICT DO NOTHING", (user_id, achievement))
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {e}")
    finally:
        cursor.close()
        conn.close()

def get_stars(user_id):
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("SELECT stars FROM user_stars WHERE user_id = %s", (user_id,))
        result = cursor.fetchone()
        if not result:
            cursor.execute("INSERT INTO user_stars (user_id, stars) VALUES (%s, 0)", (user_id,))
            conn.commit()
            result = (0,)
        return result[0]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–≤—ë–∑–¥: {e}")
        return 0
    finally:
        cursor.close()
        conn.close()

def update_stars(user_id, amount):
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("INSERT INTO user_stars (user_id, stars) VALUES (%s, %s) ON CONFLICT (user_id) DO UPDATE SET stars = user_stars.stars + %s", 
                       (user_id, amount, amount))
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–≤—ë–∑–¥: {e}")
    finally:
        cursor.close()
        conn.close()

def save_game_result(user_id, game_name, score):
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("INSERT INTO game_results (user_id, game_name, score) VALUES (%s, %s, %s)", (user_id, game_name, score))
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã: {e}")
    finally:
        cursor.close()
        conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:", reply_markup=MAIN_KEYBOARD)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π
def get_forecast(city):
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    try:
        response = requests.get(url)
        data = response.json()
        if data["cod"] == "200":
            forecast_text = f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π –≤ {city}:\n"
            daily_data = {}
            for entry in data["list"]:
                date = entry["dt_txt"].split(" ")[0]
                if date not in daily_data and "12:00:00" in entry["dt_txt"]:
                    temp = entry["main"]["temp"]
                    desc = entry["weather"][0]["description"]
                    daily_data[date] = f"{date}: {temp}¬∞C, {desc}"
            forecast_text += "\n".join(daily_data.values())
            return forecast_text
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞."

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    user_id = update.message.from_user.id

    if text == "–ú–µ–Ω—é":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=MAIN_KEYBOARD)
        context.user_data.clear()
        return

    if context.user_data.get("awaiting_city"):
        city = text.strip()
        forecast_info = get_forecast(city)
        weather_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚≠ê –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –ª—é–±–∏–º—ã–π", callback_data=f"save_city_{city}")]
        ])
        await update.message.reply_text(forecast_info, reply_markup=weather_keyboard)
        log_weather_request(user_id, city)
        context.user_data["awaiting_city"] = False

    elif context.user_data.get("awaiting_game") == "Cities":
        city = text.strip().lower()
        game_name, score, state = get_game_state(user_id)
        if game_name != "Cities":
            await update.message.reply_text("–í—ã –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ –≤ '–ì–æ—Ä–æ–¥–∞' —Å–µ–π—á–∞—Å.", reply_markup=MAIN_KEYBOARD)
            context.user_data["awaiting_game"] = False
            return
        state = json.loads(state) if isinstance(state, str) else state
        last_city = state.get("last_city", "")
        used_cities = state.get("used_cities", [])

        if city not in VALID_CITIES:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ù–∞–∑–æ–≤–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ú–µ–Ω—é' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
            return
        elif city in used_cities:
            await update.message.reply_text("–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª –Ω–∞–∑–≤–∞–Ω! –ù–∞–∑–æ–≤–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ú–µ–Ω—é' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–≥—Ä–∞—é—â—É—é –±—É–∫–≤—É, –∏—Å–∫–ª—é—á–∞—è '—å' –∏ '—ä'
        last_letter = last_city
        while last_letter and last_letter[-1] in '—å—ä':
            last_letter = last_letter[:-1]
        last_letter = last_letter[-1] if last_letter else ''

        if last_city and city[0] != last_letter:
            await update.message.reply_text(f"–ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã '{last_letter.upper()}'. –ù–∞–∑–æ–≤–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ú–µ–Ω—é' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
            return
        else:
            score += 10
            used_cities.append(city)
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–≥—Ä–∞—é—â—É—é –±—É–∫–≤—É –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
            next_letter = city
            while next_letter and next_letter[-1] in '—å—ä':
                next_letter = next_letter[:-1]
            next_letter = next_letter[-1] if next_letter else ''
            
            available_cities = [c for c in VALID_CITIES if c.startswith(next_letter) and c not in used_cities]
            bot_city = random.choice(available_cities) if available_cities else None
            if bot_city:
                used_cities.append(bot_city)
                state["last_city"] = bot_city
                state["used_cities"] = used_cities
                update_game_state(user_id, score, state)
                save_game_result(user_id, "Cities", score)
                if score >= 100:
                    award_achievement(user_id, "–ú–∞—Å—Ç–µ—Ä –≥–æ—Ä–æ–¥–æ–≤")
                    await context.bot.send_sticker(chat_id=update.message.chat_id, sticker="CAACAgIAAxkBAAEKDhJk2Xh-RpP8uN8GLgG8o8nK0oW6rwAC5y0AAp8oyEmQ8eL5oIElbjME")
                    await update.message.reply_text(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ë–æ—Ç: {bot_city.capitalize()}\n–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '–ú–∞—Å—Ç–µ—Ä –≥–æ—Ä–æ–¥–æ–≤' (üèôÔ∏è) –ø–æ–ª—É—á–µ–Ω–æ! –û—á–∫–∏: {score}", reply_markup=MAIN_KEYBOARD)
                    update_stars(user_id, 10)
                    context.user_data["awaiting_game"] = False
                else:
                    await update.message.reply_text(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ë–æ—Ç: {bot_city.capitalize()}\n–û—á–∫–∏: {score}. –ù–∞–∑–æ–≤–∏ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ—Ä–æ–¥:")
            else:
                save_game_result(user_id, "Cities", score)
                await update.message.reply_text(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ —è –Ω–µ –Ω–∞—à—ë–ª –≥–æ—Ä–æ–¥–∞ –Ω–∞ '{next_letter.upper()}'. –¢—ã –ø–æ–±–µ–¥–∏–ª! –û—á–∫–∏: {score}", reply_markup=MAIN_KEYBOARD)
                if score >= 100:
                    award_achievement(user_id, "–ú–∞—Å—Ç–µ—Ä –≥–æ—Ä–æ–¥–æ–≤")
                    await context.bot.send_sticker(chat_id=update.message.chat_id, sticker="CAACAgIAAxkBAAEKDhJk2Xh-RpP8uN8GLgG8o8nK0oW6rwAC5y0AAp8oyEmQ8eL5oIElbjME")
                    update_stars(user_id, 10)
                context.user_data["awaiting_game"] = False

    elif context.user_data.get("awaiting_game") == "Guess":
        try:
            guess = int(text.strip())
            game_name, score, state = get_game_state(user_id)
            if game_name != "Guess":
                await update.message.reply_text("–í—ã –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ –≤ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ' —Å–µ–π—á–∞—Å.", reply_markup=MAIN_KEYBOARD)
                context.user_data["awaiting_game"] = False
                return
            state = json.loads(state) if isinstance(state, str) else state
            target = state.get("target")
            attempts = state.get("attempts", 0) + 1

            if guess == target:
                score += 10
                state["attempts"] = attempts
                update_game_state(user_id, score, state)
                save_game_result(user_id, "Guess", score)
                if score >= 100:
                    award_achievement(user_id, "–ú–∞—Å—Ç–µ—Ä —É–≥–∞–¥—ã–≤–∞–Ω–∏—è")
                    await context.bot.send_sticker(chat_id=update.message.chat_id, sticker="CAACAgIAAxkBAAEKDhJk2Xh-RpP8uN8GLgG8o8nK0oW6rwAC5y0AAp8oyEmQ8eL5oIElbjME")
                    await update.message.reply_text(f"–£–≥–∞–¥–∞–ª —Å {attempts} –ø–æ–ø—ã—Ç–∫–∏! –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '–ú–∞—Å—Ç–µ—Ä —É–≥–∞–¥—ã–≤–∞–Ω–∏—è' (üé≤) –ø–æ–ª—É—á–µ–Ω–æ! –û—á–∫–∏: {score}", reply_markup=MAIN_KEYBOARD)
                    update_stars(user_id, 10)
                    context.user_data["awaiting_game"] = False
                else:
                    state["target"] = random.randint(1, 100)
                    state["attempts"] = 0
                    update_game_state(user_id, score, state)
                    await update.message.reply_text(f"–£–≥–∞–¥–∞–ª —Å {attempts} –ø–æ–ø—ã—Ç–∫–∏! –û—á–∫–∏: {score}. –Ø –∑–∞–≥–∞–¥–∞–ª –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –£–≥–∞–¥–∞–π:")
            elif guess < target:
                state["attempts"] = attempts
                update_game_state(user_id, score, state)
                await update.message.reply_text("–ú–æ—ë —á–∏—Å–ª–æ –±–æ–ª—å—à–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë:")
            else:
                state["attempts"] = attempts
                update_game_state(user_id, score, state)
                await update.message.reply_text("–ú–æ—ë —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë:")
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100! –ò–ª–∏ –Ω–∞–ø–∏—à–∏ '–ú–µ–Ω—é' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")

    elif context.user_data.get("awaiting_game") == "Quest":
        game_name, score, state = get_game_state(user_id)
        if game_name != "Quest":
            await update.message.reply_text("–í—ã –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ –≤ '–ö–≤–µ—Å—Ç' —Å–µ–π—á–∞—Å.", reply_markup=MAIN_KEYBOARD)
            context.user_data["awaiting_game"] = False
            return
        state = json.loads(state) if isinstance(state, str) else state
        stage = state.get("stage", 0)
        if text.lower() in ["–≤–ø–µ—Ä—ë–¥", "–¥–∞"] and stage < len(QUEST_STAGES):
            score += 10
            state["stage"] = stage + 1
            update_game_state(user_id, score, state)
            save_game_result(user_id, "Quest", score)
            if stage + 1 >= len(QUEST_STAGES):
                if score >= 100:
                    award_achievement(user_id, "–ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π")
                    await context.bot.send_sticker(chat_id=update.message.chat_id, sticker="CAACAgIAAxkBAAEKDhJk2Xh-RpP8uN8GLgG8o8nK0oW6rwAC5y0AAp8oyEmQ8eL5oIElbjME")
                    await update.message.reply_text(f"–¢—ã –ø—Ä–æ—à—ë–ª –∫–≤–µ—Å—Ç! –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '–ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π' (üó∫Ô∏è) –ø–æ–ª—É—á–µ–Ω–æ! –û—á–∫–∏: {score}", reply_markup=MAIN_KEYBOARD)
                    update_stars(user_id, 10)
                else:
                    await update.message.reply_text(f"–¢—ã –ø—Ä–æ—à—ë–ª –∫–≤–µ—Å—Ç! –û—á–∫–∏: {score}", reply_markup=MAIN_KEYBOARD)
                context.user_data["awaiting_game"] = False
            else:
                await update.message.reply_text(QUEST_STAGES[stage + 1])
        else:
            save_game_result(user_id, "Quest", score)
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∫–≤–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω!", reply_markup=MAIN_KEYBOARD)
            context.user_data["awaiting_game"] = False

    elif context.user_data.get("awaiting_game") == "Logic":
        game_name, score, state = get_game_state(user_id)
        if game_name != "Logic":
            await update.message.reply_text("–í—ã –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ –≤ '–õ–æ–≥–∏–∫—É' —Å–µ–π—á–∞—Å.", reply_markup=MAIN_KEYBOARD)
            context.user_data["awaiting_game"] = False
            return
        state = json.loads(state) if isinstance(state, str) else state
        riddle_idx = state.get("riddle_idx", 0)
        riddle = LOGIC_RIDDLES[riddle_idx]
        if text.strip().lower() == riddle["answer"]:
            score += 10
            riddle_idx = (riddle_idx + 1) % len(LOGIC_RIDDLES)
            state["riddle_idx"] = riddle_idx
            update_game_state(user_id, score, state)
            save_game_result(user_id, "Logic", score)
            if score >= 100:
                award_achievement(user_id, "–ú–∞—Å—Ç–µ—Ä –ª–æ–≥–∏–∫–∏")
                await context.bot.send_sticker(chat_id=update.message.chat_id, sticker="CAACAgIAAxkBAAEKDhJk2Xh-RpP8uN8GLgG8o8nK0oW6rwAC5y0AAp8oyEmQ8eL5oIElbjME")
                await update.message.reply_text(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '–ú–∞—Å—Ç–µ—Ä –ª–æ–≥–∏–∫–∏' (üß©) –ø–æ–ª—É—á–µ–Ω–æ! –û—á–∫–∏: {score}", reply_markup=MAIN_KEYBOARD)
                update_stars(user_id, 10)
                context.user_data["awaiting_game"] = False
            else:
                await update.message.reply_text(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—á–∫–∏: {score}\n{LOGIC_RIDDLES[riddle_idx]['riddle']}")
        else:
            save_game_result(user_id, "Logic", score)
            await update.message.reply_text(f"–ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {riddle['answer']}. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.", reply_markup=MAIN_KEYBOARD)
            context.user_data["awaiting_game"] = False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id

    try:
        await query.answer()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å {query.id}: {e}")

    current_text = query.message.text
    current_markup = query.message.reply_markup

    logger.info(f"Callback –æ—Ç {user_id}: {query.data}")

    if query.data == "weather":
        if current_text != "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π:":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π:")
            await query.message.reply_text("–í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥:")
        context.user_data["awaiting_city"] = True

    elif query.data == "admin":
        if current_text != "–í—ã –Ω–∞–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.":
            await query.edit_message_text("–í—ã –Ω–∞–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=MAIN_KEYBOARD)
            username = query.from_user.username
            message = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={user_id}">@{username or user_id}</a> –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º!'
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message, parse_mode='HTML')

    elif query.data == "favorite_weather":
        city = get_favorite_city(user_id)
        if city:
            forecast_info = get_forecast(city)
            if current_text != forecast_info or current_markup != MAIN_KEYBOARD:
                await query.edit_message_text(forecast_info, reply_markup=MAIN_KEYBOARD)
        else:
            if current_text != "–£ –≤–∞—Å –Ω–µ—Ç –ª—é–±–∏–º–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:":
                await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ª—é–±–∏–º–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:")
                await query.message.reply_text("–í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥:")
            context.user_data["awaiting_city"] = True

    elif query.data.startswith("save_city_"):
        city = query.data.split("_")[2]
        save_favorite_city(user_id, city)
        if current_text != f"–ì–æ—Ä–æ–¥ {city} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ –ª—é–±–∏–º—ã–π!":
            await query.edit_message_text(f"–ì–æ—Ä–æ–¥ {city} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ –ª—é–±–∏–º—ã–π!", reply_markup=MAIN_KEYBOARD)

    elif query.data == "play":
        if current_text != "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:" or current_markup != GAMES_KEYBOARD:
            await query.edit_message_text("–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", reply_markup=GAMES_KEYBOARD)

    elif query.data == "game_cities":
        start_game(user_id, "Cities")
        if current_text != "–ò–≥—Ä–∞ '–ì–æ—Ä–æ–¥–∞' –Ω–∞—á–∞–ª–∞—Å—å! –ù–∞–∑–æ–≤–∏ –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥:":
            await query.edit_message_text("–ò–≥—Ä–∞ '–ì–æ—Ä–æ–¥–∞' –Ω–∞—á–∞–ª–∞—Å—å! –ù–∞–∑–æ–≤–∏ –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥:")
            await query.message.reply_text("–ù–∞–∑–æ–≤–∏ –≥–æ—Ä–æ–¥:")
        context.user_data["awaiting_game"] = "Cities"

    elif query.data == "game_guess":
        start_game(user_id, "Guess")
        target = random.randint(1, 100)
        state = {"target": target, "attempts": 0}
        update_game_state(user_id, 0, state)
        if current_text != "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –£–≥–∞–¥–∞–π:":
            await query.edit_message_text("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –£–≥–∞–¥–∞–π:")
            await query.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ:")
        context.user_data["awaiting_game"] = "Guess"

    elif query.data == "game_quest":
        start_game(user_id, "Quest")
        state = {"stage": 0}
        update_game_state(user_id, 0, state)
        if current_text != QUEST_STAGES[0]:
            await query.edit_message_text(QUEST_STAGES[0])
            await query.message.reply_text("–í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç:")
 –∫–æ–Ω—Ç–µ–∫—Å—Ç.–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_–¥–∞–Ω–Ω—ã–µ["–æ–∂–∏–¥–∞–Ω–∏–µ_–∏–≥—Ä—ã"] = "–ö–≤–µ—Å—Ç"–∫–æ–Ω—Ç–µ–∫—Å—Ç.–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_–¥–∞–Ω–Ω—ã–µ["–æ–∂–∏–¥–∞–Ω–∏–µ_–∏–≥—Ä—ã"] = "–ö–≤–µ—Å—Ç"

 —ç–ª–∏—Ñ –∑–∞–ø—Ä–æ—Å.–¥–∞–Ω–Ω—ã–µ == "–∏–≥—Ä–∞_–ª–æ–≥–∏–∫–∞":—ç–ª–∏—Ñ –∑–∞–ø—Ä–æ—Å.–¥–∞–Ω–Ω—ã–µ == "–∏–≥—Ä–∞_–ª–æ–≥–∏–∫–∞":
 start_igrarastart_game(user_id, "–õ–æ–≥–∏–∫–∞")(user_id, "–õ–æ–≥–∏–∫–∞")
 –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ = { "–∑–∞–≥–∞–¥–∫–∞_idx": 0}–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ = { "–∑–∞–≥–∞–¥–∫–∞_idx": 0}
 obnovl–µni–µ_game_stateupdate_game_state(user_id, 0, –∫–æ—Å—Ç–æ–π—è–Ω–∏)(user_id, 0, –∫–æ—Å—Ç–æ–π—è–Ω–∏)
 –µ—Å–ª–∏ —Ç–µ–∫—É –∏—Ç–µ—Ä–∏–π_—Ç–µ–∫—Å—Ç!= LOGIC_RIDDLES[0]["–∑–∞–≥–∞–¥–∫–∞"]:teku iteriyiy_tecst!= LOGIC_RIDDLES[0]["–∑–∞–≥–∞–¥–∫–∞"]:
 –∑–∞–ø—Ä–æ—Å jdaty.edit_message_text(–õ–û–ì–ò–ö–ê_–ó–ê–ì–ê–î–ö–ò[0]["–∑–∞–≥–∞–¥–∫–∞])jdaty query.edit_message_text(LOGIC_RIDDLES[0]["–∑–∞–≥–∞–¥–∫–∞])
 –∑–∞–ø—Ä–æ—Å jdem.—Å–æ–æ–±—â–µ–Ω–∏–µ.–æ—Ç–≤–µ—Ç–∏—Ç—å_text("–í–≤–µ–¥–∏–æ—Ç–≤–µ—Ç:")–∑–∞–ø—Ä–æ—Å jdem.—Å–æ–æ–±—â–µ–Ω–∏–µ.–æ—Ç–≤–µ—Ç–∏—Ç—å_text("–í–≤–µ–¥–∏–æ—Ç–≤–µ—Ç:")
 –∫–æ–Ω—Ç–µ–∫—Å—Ç.–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_–¥–∞–Ω–Ω—ã–µ["–æ–∂–∏–¥–∞–Ω–∏–µ_–∏–≥—Ä—ã"] = "–õ–æ–≥–∏–∫–∞"–∫–æ–Ω—Ç–µ–∫—Å—Ç.–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_–¥–∞–Ω–Ω—ã–µ["–æ–∂–∏–¥–∞–Ω–∏–µ_–∏–≥—Ä—ã"] = "–õ–æ–≥–∏–∫–∞"

 —ç–ª–∏—Ñ –∑–∞–ø—Ä–æ—Å.–¥–∞–Ω–Ω—ã–µ == "–æ—Å–Ω–æ–≤–æ–π":—ç–ª–∏—Ñ –∑–∞–ø—Ä–æ—Å.–¥–∞–Ω–Ω—ã–µ == "–æ—Å–Ω–æ–≤–æ–π":
 –µ—Å–ª–∏ —Ç–µ–∫—É –∏—Ç–µ—Ä–∏–π_—Ç–µ–∫—Å—Ç!= "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ:" ili tekuyiy_markup!= MAIN_KEYBOARD:–µ—Å–ª–∏ —Ç–µ–∫—É –∏—Ç–µ—Ä–∏–π_—Ç–µ–∫—Å—Ç!= "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–Ω–µ:" ili tekuyiy_markup != MAIN_KEYBOARD:
 jdem query.edit_message_text("–í—ã –≤—ë—Ä—å: –≥–ª–∞–≤–Ω–æ–µ:", responte_markup=MAIN_KEYBOARD)jdem query.edit_message_text("–í—ã –≤—ë—Ä–Ω—É—Å –≤ –≥–ª—è–≤–Ω–æ:", responte_markup=MAIN_KEYBOARD)jdem query.edit_message_text("–í—ã –≤—ë—Ä–Ω—É—Å –≤ –∫–ª—è–≤–Ω–æ:", responte_markupMAIN_KEYBOARD)
 –∫–æ–Ω—Ç–µ–∫—Å—Ç.user_data.clear()context.user_data.clear()

#–ö–æ–º–∞–Ω–¥–∞ dlia demostracii plel√©gewsie sistemys
async def pay (obnovlennie: Obnovl√©ni–µ, kontecst: ContextTypes.DEFAULT_TYPE) -> –ù–µ—Ç:
 dodojdati—Åya update.message.reply_text(f"Demonstracia platega —Åo ispollzovaniem PROVIDER_TOKEN: {PROVIDER_TOKEN[:5]}...", responte_markup=MAIN_KEYBOARD)dodojdati—Åya update.message.reply_text(f"Demonstracia platega —Åospollzovaniem PROVIDER_TOKEN:{PROVIDER_TOKEN[:5]}...", responte_markup=MAIN_KEYBOARD)

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
oshibka Async def (obnovl–µni–µ: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –∫–æ–Ω–µ—Ü: ContextTypes.DEFAULT_TYPE) -> –ù–µ—Ç:
 logger.error (f'Proizooshla oshibka: {context.error}')logger.error (f'Proizooshla oshibka: {context.error}')
 error_message = "Proizoshl–∞ oshibka, poprobuyte pozg–µ."error_message = "Proizoshl–∞ oshibka, poprobuyte popzgesh."
 –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ –æ–±—Å—É–¥—è—Ç: –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ –æ–±—Å—É–¥—è—Ç:
 esli update.message: #–î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å –æ–±–µ–Ω–∏–µ—Å–ª—ã update.message: #–î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å –æ–±–µ–Ω–∏
 logger.info ("–û—à–∏–±–∫–∞ –≤ –æ–±–∏–Ω–∞—Ö, –æ—Ç–ø—Ä–∞–≤–ª—ë—Ç –æ—Ç–≤–µ—Ç–µ —Å MAIN_KEYBOARD")logger.info ("–û—à–∏–±–∫–∞ –≤ —Å–æ–±–∏–Ω–∞—Ö, –æ—Ç–ø—Ä–∞–≤–ª—ë—Ç –æ—Ç–≤–µ—Ç –≤–µ—Ç–≤–µ —Å MAIN_KEYBOARD")
 dodojdati—Åya update.message.reply_text(error_message, reple_markup=MAIN_KEYBOARD)dodojdati—Åya update.message.reply_text(error_message, reple_markup=MAIN_KEYBOARD)
 elif update.callback_query: #–î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–æ–∫-–∑–∞–ø—Ä–æ—Å–æ–≤–µ–ª–∏—Ñ update.callback_query: #–î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–æ–∫-–∑–∞–ø—Ä–æ—Å–æ–≤
 zapro—Å = update.callback_queryzapro—Å = update.callback_query
 –µ—Å–ª–∏ query.message.text!= error_message:ecli query.message.text!= error_message:
 logger.info("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –≤—ã–∑–æ–≤–µ, reretaktiru–µm sobeni–µ —Å MAIN_KEYBOARD")logger.info("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –≤—ã–∑–æ–≤–µ, reretaktiru–µm sobeni–µ —Å MAIN_KEYBOARD")
 ogjidani–µ query.edit_message_text(error_message, replete_markup=MAIN_KEYBOARD)ogjidani–µ query.edit_message_text(error_message, replete_markup=MAIN_KEYBOARD)

async def post_init (–ø—Ä–∏–ª–æ–∂–µ–Ω—å–µ: –ü—Ä–∏–ª–æ–∂–µ–Ω—å–µ) -> –ù–µ—Ç:
 #–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –ú–µ–Ω-–î–ª—è –í—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥#–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –ú–µ–Ω-–î–ª—è –í—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥
 prilogeni–µ Ojidani–µ.bot.set_chat_menu_button(menu_button={"—Ç–∏–ø: "commands"})prilogeni–µ Ojidani–µ.bot.set_chat_menu_button(menu_button={"—Ç–∏–ø: "commands"})

asyncasync def post_init (–ø—Ä–∏–ª–æ–∂–µ–Ω—å–µ: –ü—Ä–∏–ª–æ–∂–µ–Ω—å–µ) -> Net:def post_init (–ø—Ä–∏–ª–æ–∂–µ–Ω—å–µ: –ü—Ä–∏–ª–æ–∂–µ–Ω—å–µ) -> Net:
 #–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –ú–µ–Ω-–î–ª—è –í—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥#–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –ú–µ–Ω-–î–ª—è –í—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥
 prilogeni–µ Ojidani–µ.bot.set_chat_menu_button(menu_button={"—Ç–∏–ø: "–∫–æ–º–∞–Ω–¥—ã"})bot.set_chat_menu_button(menu_button={"—Ç–∏–ø: "–∫–æ–º–∞–Ω–¥—ã"})

m√©nunus async def (obnovl–µni–µ: Obnovl–µni–µ, kontecst: ContextTypes.DEFAULT_TYPE) -> –ù–µ—Ç:
 #–û–±—Ä–∞–±–æ—á–∏–∫ –ö–æ–º–∞–Ω–¥—ã /menu‚àû, otobrarajaet glavnoe mugchiny#–û–±—Ä–∞–±–æ—á–∏–∫ –ö–æ–º–∞–Ω–¥—ã /menu‚àû, otobrarajaet glavnoe mugchiny
 dodojdati—Åya update.message.reply_text("–í—ã, –æ—Ç—Ä–∫—Ä—ã–ª—ã –≥–ª–µ–≤–Ω–æ–µ:", responte_markup=MAIN_KEYBOARD)dodojdati—Åya update.message.reply_text("–í—ã, –æ—Ç—Ä–∫—Ä—ã–ª—ã –≥–ª–µ–≤–Ω–æ–µ –º–Ω–µ:", responte_markup=MAIN_KEYBOARD)

def main() -> –ù–µ—Ç:
 init_db()init_db()
 prilogeni–µ = Application.builder().token(TOKEN).post_init(post_init).build()prilogeni–µ = Application.builder().token(TOKEN).post_init(post_init).build()
 application.add_handler(CommandHandler("zappuctiti—Åia", zappuctiti—Åcya))application.add_handler(CommandHandler("zappoustitli—Åia", zappucitli—Åia))
 application.add_handler(CommandHandler("–ø–ª–∞—Ç–∏", Platti))application.add_handler(CommandHandler("–ø–ª–∞—Ç–∏", Platti))
 application.add_handler(CommandHandler("menuly‚àû", m–µnush)) #Nov–∞—è Komandaapplication.add_handler(CommandHandler("menuly‚àû", menush)) #–ù–æ–≤–∞—è –ö–æ–º–∞–Ω–¥–∞
 application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.add_handler (CallbackQueryHandler (handle_callback))application.add_handler (CallbackQueryHandler (handle_callback))
 prilogeni–µ.add_error_handler(–æ—à–∏–±–∫–∞)prilogeni–µ.add_error_handler(–æ—à–∏–±–∫–∞)

 —Ä–∞—Å–ø–µ—á—Ç–∞—Ç ("Bott zapu charlet–µn!".kodirovaty().decode('utf-8'))—Ä–∞—Å–ø–µ—á—Ç–∞—Ç ("Bott zapu charlet–µn!".kodirovaty().decode('utf-8'))
 —Ä–∞—Å–ø–æ—á–µ—Ö–∞—Ç—ã(f"Podklulucheni–µ k babaze danny—Ö: {DATABASE_URL[:13]}... (screyt dlia bezogapatsnosti)".encode().decode('utf-8'))raspechechaty(f"Podklulucheni–µ k babaze danny—Ö: {DATABASE_URL[:13]}... (screyt dlia bezogapatsnosti)".encode().decode('utf-8'))
 —Ä–∞—Å–ø–æ—á–µ—Ö–∞—Ç—ã(f"Paroly babazy danny—Ö: {DB_PASSWORD[:0]}... (screyt dlya bezopasnocti)".kod().decode('utf-8'))raspechechaty(f"Paroly babazy danny—Ö: {DB_PASSWORD[:0]}... (screyt dlya bezopasnocti)".encode().decode('utf-8'))

 application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

esli __name__ == '__main__':
 asyncio.run(glawnyy ()) #–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏—Ü –∏ —á–µ—Ä—ë–∑ –∞—Å–∏–Ω—Å–∏–æ.runasyncio.run (glawnyy ()) #–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏—Ü –∏ —á–µ—Ä—ë–∑ –∞—Å–∏–Ω—Å–∏–æ.run (glawnyyy ()) #–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Å—å–æ.run
